/****************************************************************************
              Copyright (c) 2022 Maxima Technologies and Systems
                           All Rights Reserved

   File Name          : Data_Layer.h
   Author             : Jonathan Serrano
   Version            : V0.0.0.1
   Origination Date   : 21/01/2022
   Description        : Header File.
   Environment        : Independant
   Processor:         : STM32H743IIT6

-----------------------------------------------------------------------------
   Description:

		General File Description
-----------------------------------------------------------------------------
	File Revision History:
-----------------------------------------------------------------------------
   Version             Date                 Programmer
   0.0.0.0              06/25/2020          Jonathan Serrano
   0.0.0.1              21/01/2022          Rajesh

   Notes:              - Initial Version
-----------------------------------------------------------------------------
*****************************************************************************
THIS FILE CONTAINS INTELLECTUAL PROPERTY OF MAXIMA TECHNOLOGIES AND SYSTEMS.
UNAUTHORIZED REDISTRIBUTION OF THIS SOURCE CODE, IN WHOLE OR PART, WITHOUT
THE EXPRESS WRITTEN PERMISSION OF MAXIMA TECHNOLOGIES IS STRICTLY PROHIBITED.
****************************************************************************/

#ifndef __Data_Layer_H
#define __Data_Layer_H

/* Includes ---------------------------------------------------------------*/
#include "Common.h"
#include "EE_PH_DB.h"

/* USER CODE BEGIN enum */
/*!
 * DB Fields
 */
typedef enum DL_Data_T
{
START_U8BIT,
#if (SDK_SERVICE_WARNING_LIGHT == PS_ENABLE)

#if (CONF_WARNING_LIGHT_01_ENABLE == PS_ENABLE)
WARNING_LIGHT_01_STATE,
WARNING_LIGHT_01_PWM_DC,
#else
/* Since the Warning Light 1 is disable, adding the dummy field */
WARNING_LIGHT_01_STATE_DUMMY,
WARNING_LIGHT_01_PWM_DC_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_02_ENABLE == PS_ENABLE)
WARNING_LIGHT_02_STATE,
WARNING_LIGHT_02_PWM_DC,
#else
/* Since the Warning Light 2 is disable, adding the dummy field */
WARNING_LIGHT_02_STATE_DUMMY,
WARNING_LIGHT_02_PWM_DC_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_03_ENABLE == PS_ENABLE)
WARNING_LIGHT_03_STATE,
WARNING_LIGHT_03_PWM_DC,
#else
/* Since the Warning Light 3 is disable, adding the dummy field */
WARNING_LIGHT_03_STATE_DUMMY,
WARNING_LIGHT_03_PWM_DC_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_04_ENABLE == PS_ENABLE)
WARNING_LIGHT_04_STATE,
WARNING_LIGHT_04_PWM_DC,
#else
/* Since the Warning Light 4 is disable, adding the dummy field */
WARNING_LIGHT_04_STATE_DUMMY,
WARNING_LIGHT_04_PWM_DC_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_05_ENABLE == PS_ENABLE)
WARNING_LIGHT_05_STATE,
WARNING_LIGHT_05_PWM_DC,
#else
/* Since the Warning Light 5 is disable, adding the dummy field */
WARNING_LIGHT_05_STATE_DUMMY,
WARNING_LIGHT_05_PWM_DC_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_06_ENABLE == PS_ENABLE)
WARNING_LIGHT_06_STATE,
WARNING_LIGHT_06_PWM_DC,
#else
/* Since the Warning Light 6 is disable, adding the dummy field */
WARNING_LIGHT_06_STATE_DUMMY,
WARNING_LIGHT_06_PWM_DC_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_07_ENABLE == PS_ENABLE)
WARNING_LIGHT_07_STATE,
WARNING_LIGHT_07_PWM_DC,
#else
/* Since the Warning Light 7 is disable, adding the dummy field */
WARNING_LIGHT_07_STATE_DUMMY,
WARNING_LIGHT_07_PWM_DC_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_08_ENABLE == PS_ENABLE)
WARNING_LIGHT_08_STATE,
WARNING_LIGHT_08_PWM_DC,
#else
/* Since the Warning Light 8 is disable, adding the dummy field */
WARNING_LIGHT_08_STATE_DUMMY,
WARNING_LIGHT_08_PWM_DC_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_09_ENABLE == PS_ENABLE)
WARNING_LIGHT_09_STATE,
WARNING_LIGHT_09_PWM_DC,
#else
/* Since the Warning Light 9 is disable, adding the dummy field */
WARNING_LIGHT_09_STATE_DUMMY,
WARNING_LIGHT_09_PWM_DC_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_10_ENABLE == PS_ENABLE)
WARNING_LIGHT_10_STATE,
WARNING_LIGHT_10_PWM_DC,
#else
/* Since the Warning Light 10 is disable, adding the dummy field */
WARNING_LIGHT_10_STATE_DUMMY,
WARNING_LIGHT_10_PWM_DC_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_11_ENABLE == PS_ENABLE)
WARNING_LIGHT_11_STATE,
WARNING_LIGHT_11_PWM_DC,
#else
/* Since the Warning Light 11 is disable, adding the dummy field */
WARNING_LIGHT_11_STATE_DUMMY,
WARNING_LIGHT_11_PWM_DC_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_12_ENABLE == PS_ENABLE)
WARNING_LIGHT_12_STATE,
WARNING_LIGHT_12_PWM_DC,
#else
/* Since the Warning Light 12 is disable, adding the dummy field */
WARNING_LIGHT_12_STATE_DUMMY,
WARNING_LIGHT_12_PWM_DC_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_13_ENABLE == PS_ENABLE)
WARNING_LIGHT_13_STATE,
WARNING_LIGHT_13_PWM_DC,
#else
/* Since the Warning Light 13 is disable, adding the dummy field */
WARNING_LIGHT_13_STATE_DUMMY,
WARNING_LIGHT_13_PWM_DC_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_14_ENABLE == PS_ENABLE)
WARNING_LIGHT_14_STATE,
WARNING_LIGHT_14_PWM_DC,
#else
/* Since the Warning Light 14 is disable, adding the dummy field */
WARNING_LIGHT_14_STATE_DUMMY,
WARNING_LIGHT_14_PWM_DC_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_15_ENABLE == PS_ENABLE)
WARNING_LIGHT_15_STATE,
WARNING_LIGHT_15_PWM_DC,
#else
/* Since the Warning Light 15 is disable, adding the dummy field */
WARNING_LIGHT_15_STATE_DUMMY,
WARNING_LIGHT_15_PWM_DC_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_16_ENABLE == PS_ENABLE)
WARNING_LIGHT_16_STATE,
WARNING_LIGHT_16_PWM_DC,
#else
/* Since the Warning Light 16 is disable, adding the dummy field */
WARNING_LIGHT_16_STATE_DUMMY,
WARNING_LIGHT_16_PWM_DC_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_17_ENABLE == PS_ENABLE)
WARNING_LIGHT_17_STATE,
WARNING_LIGHT_17_PWM_DC,
#else
/* Since the Warning Light 17 is disable, adding the dummy field */
WARNING_LIGHT_17_STATE_DUMMY,
WARNING_LIGHT_17_PWM_DC_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_18_ENABLE == PS_ENABLE)
WARNING_LIGHT_18_STATE,
WARNING_LIGHT_18_PWM_DC,
#else
/* Since the Warning Light 18 is disable, adding the dummy field */
WARNING_LIGHT_18_STATE_DUMMY,
WARNING_LIGHT_18_PWM_DC_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_19_ENABLE == PS_ENABLE)
WARNING_LIGHT_19_STATE,
WARNING_LIGHT_19_PWM_DC,
#else
/* Since the Warning Light 19 is disable, adding the dummy field */
WARNING_LIGHT_19_STATE_DUMMY,
WARNING_LIGHT_19_PWM_DC_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_20_ENABLE == PS_ENABLE)
WARNING_LIGHT_20_STATE,
WARNING_LIGHT_20_PWM_DC,
#else
/* Since the Warning Light 20 is disable, adding the dummy field */
WARNING_LIGHT_20_STATE_DUMMY,
WARNING_LIGHT_20_PWM_DC_DUMMY,
#endif
#endif	//SDK_SERVICE_WARNING_LIGHT

#if (SDK_SERVICE_KEYPAD == PS_ENABLE)
KEYPAD_BACKLIGHT,

#if (CONF_KEYPAD_01_STATE == PS_ENABLE)
KEY_STATUS_01,
KEY_PRESS_01,
#else
KEY_STATUS_01_DUMMY,
KEY_PRESS_01_DUMMY,
#endif

#if (CONF_KEYPAD_02_STATE == PS_ENABLE)
KEY_STATUS_02,
KEY_PRESS_02,
#else
KEY_STATUS_02_DUMMY,
KEY_PRESS_02_DUMMY,
#endif

#if (CONF_KEYPAD_03_STATE == PS_ENABLE)
KEY_STATUS_03,
KEY_PRESS_03,
#else
KEY_STATUS_03_DUMMY,
KEY_PRESS_03_DUMMY,
#endif

#if (CONF_KEYPAD_04_STATE == PS_ENABLE)
KEY_STATUS_04,
KEY_PRESS_04,
#else
KEY_STATUS_04_DUMMY,
KEY_PRESS_04_DUMMY,
#endif
#endif	//SDK_SERVICE_KEYPAD

#if (SDK_SERVICE_RTC == PS_ENABLE)
RTC_SECOND,
RTC_MINUTE,
RTC_HOUR,
RTC_DATE,
RTC_WEEK_DAY,
RTC_MONTH,
RTC_YEAR,
RTC_TIME_FORMAT,
RTC_ALARM_A_SECOND,
RTC_ALARM_A_MINUTE,
RTC_ALARM_A_HOUR,
RTC_ALARM_A_DAY,
RTC_ALARM_A_WEEK_DAY,
RTC_ALARM_A_MONTH,
RTC_ALARM_A_YEAR,
RTC_ALARM_A_TIME_FORMAT,
RTC_ALARM_B_SECOND,
RTC_ALARM_B_MINUTE,
RTC_ALARM_B_HOUR,
RTC_ALARM_B_DAY,
RTC_ALARM_B_WEEK_DAY,
RTC_ALARM_B_MONTH,
RTC_ALARM_B_YEAR,
RTC_ALARM_B_TIME_FORMAT,
GET_RTC_SECOND,
GET_RTC_MINUTE,
GET_RTC_HOUR,
GET_RTC_DATE,
GET_RTC_WEEK_DAY,
GET_RTC_MONTH,
GET_RTC_YEAR,
GET_RTC_TIME_FORMAT,
SET_RTC,
SET_ALARM_A,
ALARM_A_STATUS,
SET_ALARM_B,
ALARM_B_STATUS,
#else
RTC_SECOND_DUMMY,
RTC_MINUTE_DUMMY,
RTC_HOUR_DUMMY,
RTC_DATE_DUMMY,
RTC_WEEK_DAY_DUMMY,
RTC_MONTH_DUMMY,
RTC_YEAR_DUMMY,
RTC_TIME_FORMAT_DUMMY,
RTC_ALARM_A_SECOND_DUMMY,
RTC_ALARM_A_MINUTE_DUMMY,
RTC_ALARM_A_HOUR_DUMMY,
RTC_ALARM_A_DAY_DUMMY,
RTC_ALARM_A_WEEK_DAY_DUMMY,
RTC_ALARM_A_MONTH_DUMMY,
RTC_ALARM_A_YEAR_DUMMY,
RTC_ALARM_A_TIME_FORMAT_DUMMY,
RTC_ALARM_B_SECOND_DUMMY,
RTC_ALARM_B_MINUTE_DUMMY,
RTC_ALARM_B_HOUR_DUMMY,
RTC_ALARM_B_DAY_DUMMY,
RTC_ALARM_B_WEEK_DAY_DUMMY,
RTC_ALARM_B_MONTH_DUMMY,
RTC_ALARM_B_YEAR_DUMMY,
RTC_ALARM_B_TIME_FORMAT_DUMMY,
GET_RTC_SECOND_DUMMY,
GET_RTC_MINUTE_DUMMY,
GET_RTC_HOUR_DUMMY,
GET_RTC_DATE_DUMMY,
GET_RTC_WEEK_DAY_DUMMY,
GET_RTC_MONTH_DUMMY,
GET_RTC_YEAR_DUMMY,
GET_RTC_TIME_FORMAT_DUMMY,
SET_RTC_DUMMY,
SET_ALARM_A_DUMMY,
ALARM_A_STATUS_DUMMY,
SET_ALARM_B_DUMMY,
ALARM_B_STATUS_DUMMY,
#endif	//SDK_SERVICE_RTC

#if (SDK_SERVICE_DIGITAL_OUTPUT == PS_ENABLE)
DIGITAL_OUTPUT_01_STATE,
DIGITAL_OUTPUT_01_CFG,
#else
DIGITAL_OUTPUT_01_STATE_DUMMY,
DIGITAL_OUTPUT_01_CFG_DUMMY,
#endif	//SDK_SERVICE_DIGITAL_OUTPUT

#if (SDK_SERVICE_LIGHT_SENSOR == PS_ENABLE)
LIGHT_SENSOR_CONVERSION_TIME,
LIGHT_SENSOR_CONVERSION_MODE,
LIGHT_SENSOR_TRIGGER,
#else
LIGHT_SENSOR_CONVERSION_TIME_DUMMY,
LIGHT_SENSOR_CONVERSION_MODE_DUMMY,
LIGHT_SENSOR_TRIGGER_DUMMY,
#endif	//SDK_SERVICE_LIGHT_SENSOR

#if (SDK_SERVICE_LED == PS_ENABLE)

#if (CONF_RED_LED_PS_STATE == PS_ENABLE)
LED_RED_STATE,
#else
LED_RED_STATE_DUMMY,
#endif

#if (CONF_AMB_LED_PS_STATE == PS_ENABLE)
LED_AMB_STATE,
#else
LED_AMB_STATE_DUMMY,
#endif

#endif	//SDK_SERVICE_LED

#if (SDK_SERVICE_CFG_INPUT == PS_ENABLE)
CFG_INPUT_01_DIGITAL_STG,
CFG_INPUT_01_DIGITAL_STB,
CFG_INPUT_01_TYPE,
CFG_INPUT_01_NUMB_SAMPLES,
CFG_INPUT_02_DIGITAL_STG,
CFG_INPUT_02_DIGITAL_STB,
CFG_INPUT_02_TYPE,
CFG_INPUT_02_NUMB_SAMPLES,
CFG_INPUT_03_DIGITAL_STG,
CFG_INPUT_03_DIGITAL_STB,
CFG_INPUT_03_TYPE,
CFG_INPUT_03_NUMB_SAMPLES,
CFG_INPUT_04_DIGITAL_STG,
CFG_INPUT_04_DIGITAL_STB,
CFG_INPUT_04_TYPE,
CFG_INPUT_04_NUMB_SAMPLES,
CFG_INPUT_05_DIGITAL_STG,
CFG_INPUT_05_DIGITAL_STB,
CFG_INPUT_05_TYPE,
CFG_INPUT_05_NUMB_SAMPLES,
CFG_INPUT_06_DIGITAL_STG,
CFG_INPUT_06_DIGITAL_STB,
CFG_INPUT_06_TYPE,
CFG_INPUT_06_NUMB_SAMPLES,
#else
CFG_INPUT_01_DIGITAL_STG_DUMMY,
CFG_INPUT_01_DIGITAL_STB_DUMMY,
CFG_INPUT_01_TYPE_DUMMY,
CFG_INPUT_01_NUMB_SAMPLES_DUMMY,
CFG_INPUT_02_DIGITAL_STG_DUMMY,
CFG_INPUT_02_DIGITAL_STB_DUMMY,
CFG_INPUT_02_TYPE_DUMMY,
CFG_INPUT_02_NUMB_SAMPLES_DUMMY,
CFG_INPUT_03_DIGITAL_STG_DUMMY,
CFG_INPUT_03_DIGITAL_STB_DUMMY,
CFG_INPUT_03_TYPE_DUMMY,
CFG_INPUT_03_NUMB_SAMPLES_DUMMY,
CFG_INPUT_04_DIGITAL_STG_DUMMY,
CFG_INPUT_04_DIGITAL_STB_DUMMY,
CFG_INPUT_04_TYPE_DUMMY,
CFG_INPUT_04_NUMB_SAMPLES_DUMMY,
CFG_INPUT_05_DIGITAL_STG_DUMMY,
CFG_INPUT_05_DIGITAL_STB_DUMMY,
CFG_INPUT_05_TYPE_DUMMY,
CFG_INPUT_05_NUMB_SAMPLES_DUMMY,
CFG_INPUT_06_DIGITAL_STG_DUMMY,
CFG_INPUT_06_DIGITAL_STB_DUMMY,
CFG_INPUT_06_TYPE_DUMMY,
CFG_INPUT_06_NUMB_SAMPLES_DUMMY,
#endif	//SDK_SERVICE_CFG_INPUT

#if (SDK_SERVICE_LCD == PS_ENABLE)
LCD_STATE,
LCD_BRIGHTNESS,
#else
LCD_STATE_DUMMY,
LCD_BRIGHTNESS_DUMMY,
#endif	//SDK_SERVICE_LCD

#if (SDK_SERVICE_PM == PS_ENABLE)

#if (KEYPAD01_WAKEUP_SOURCE == PS_ENABLE)
KEYPAD_01_WAKEUP,
#else
KEYPAD01_DUMMY_WAKEUP,
#endif

#if (KEYPAD02_WAKEUP_SOURCE == PS_ENABLE)
KEYPAD_02_WAKEUP,
#else
KEYPAD02_DUMMY_WAKEUP,
#endif

#if (KEYPAD03_WAKEUP_SOURCE == PS_ENABLE)
KEYPAD_03_WAKEUP,
#else
KEYPAD03_DUMMY_WAKEUP,
#endif

#if (KEYPAD04_WAKEUP_SOURCE == PS_ENABLE)
KEYPAD_04_WAKEUP,
#else
KEYPAD04_DUMMY_WAKEUP,
#endif

#if (IGN_WAKEUP_SOURCE == PS_ENABLE)
IGN_WAKEUP,
#else
IGN_DUMMY_WAKEUP,
#endif

#if (RTC_WAKEUP_SOURCE_STATE == PS_ENABLE)
RTC_WAKEUP,
#else
RTC_DUMMY_WAKEUP,
#endif

POWER_MODE,
POWER_MODE_STATE,
#endif	//SDK_SERVICE_PM

#if(SDK_SERVICE_POWER_MONITOR == PS_ENABLE)
IGNITION_STATUS,
#else
IGNITION_STATUS_DUMMY,
#endif	//SDK_SERVICE_POWER_MONITOR

#if (SDK_SERVICE_WATCHDOG == PS_ENABLE)
/* USER Watchdog PING DB Variables */
#if (USER_TASK_WD0 == PS_ENABLE)
WD0_PING,
#else
WD0_PING_DUMMY,
#endif

#if (USER_TASK_WD1 == PS_ENABLE)
WD1_PING,
#else
WD1_PING_DUMMY,
#endif

#if (USER_TASK_WD2 == PS_ENABLE)
WD2_PING,
#else
WD2_PING_DUMMY,
#endif

#if (USER_TASK_WD3 == PS_ENABLE)
WD3_PING,
#else
WD3_PING_DUMMY,
#endif

#if (USER_TASK_WD4 == PS_ENABLE)
WD4_PING,
#else
WD4_PING_DUMMY,
#endif

#if (USER_TASK_WD5 == PS_ENABLE)
WD5_PING,
#else
WD5_PING_DUMMY,
#endif

#if (USER_TASK_WD6 == PS_ENABLE)
WD6_PING,
#else
WD6_PING_DUMMY,
#endif

#if (USER_TASK_WD7 == PS_ENABLE)
WD7_PING,
#else
WD7_PING_DUMMY,
#endif

#if (USER_TASK_WD8 == PS_ENABLE)
WD8_PING,
#else
WD8_PING_DUMMY,
#endif

#if (USER_TASK_WD9 == PS_ENABLE)
WD9_PING,
#else
WD9_PING_DUMMY,
#endif
#else
WD0_PING_DUMMY,
WD1_PING_DUMMY,
WD2_PING_DUMMY,
WD3_PING_DUMMY,
WD4_PING_DUMMY,
WD5_PING_DUMMY,
WD6_PING_DUMMY,
WD7_PING_DUMMY,
WD8_PING_DUMMY,
WD9_PING_DUMMY,
#endif	//SDK_SERVICE_WATCHDOG

#if (SDK_SERVICE_SWTIMER == PS_ENABLE)
TIMER_STATUS_01,
TIMER_MODE_01,
TIMER_STATUS_02,
TIMER_MODE_02,
TIMER_STATUS_03,
TIMER_MODE_03,
TIMER_STATUS_04,
TIMER_MODE_04,
TIMER_STATUS_05,
TIMER_MODE_05,
TIMER_STATUS_06,
TIMER_MODE_06,
TIMER_CALLBACK_01,
TIMER_CALLBACK_02,
TIMER_CALLBACK_03,
TIMER_CALLBACK_04,
TIMER_CALLBACK_05,
TIMER_CALLBACK_06,
#else
TIMER_STATUS_01_DUMMY,
TIMER_MODE_01_DUMMY,
TIMER_STATUS_02_DUMMY,
TIMER_MODE_02_DUMMY,
TIMER_STATUS_03_DUMMY,
TIMER_MODE_03_DUMMY,
TIMER_STATUS_04_DUMMY,
TIMER_MODE_04_DUMMY,
TIMER_STATUS_05_DUMMY,
TIMER_MODE_05_DUMMY,
TIMER_STATUS_06_DUMMY,
TIMER_MODE_06_DUMMY,
TIMER_CALLBACK_01_DUMMY,
TIMER_CALLBACK_02_DUMMY,
TIMER_CALLBACK_03_DUMMY,
TIMER_CALLBACK_04_DUMMY,
TIMER_CALLBACK_05_DUMMY,
TIMER_CALLBACK_06_DUMMY,
#endif	//SDK_SERVICE_SWTIMER

#if (SDK_SERVICE_BLE == PS_ENABLE)
BLE_TX_STATUS,
BLE_TX_BUFFER_STATUS,
BLE_RX_STATUS,
BLE_RX_BUFFER_STATUS,
BLE_COMMUNICATION_STATUS,
#else
BLE_TX_STATUS_DUMMY,
BLE_TX_BUFFER_STATUS_DUMMY,
BLE_RX_STATUS_DUMMY,
BLE_RX_BUFFER_STATUS_DUMMY,
BLE_COMMUNICATION_STATUS_DUMMY,
#endif	//SDK_SERVICE_BLE

#if (SDK_SERVICE_USB == PS_ENABLE)
USB_TX_STATUS,
USB_TX_BUFFER_STATUS,
USB_RX_STATUS,
USB_RX_BUFFER_STATUS,
USB_COMMUNICATION_STATUS,
#else
USB_TX_STATUS_DUMMY,
USB_TX_BUFFER_STATUS_DUMMY,
USB_RX_STATUS_DUMMY,
USB_RX_BUFFER_STATUS_DUMMY,
USB_COMMUNICATION_STATUS_DUMMY,
#endif	//SDK_SERVICE_USB

#if (SDK_SERVICE_CAMERA == PS_ENABLE)
CAMERA_VIDEO_STREAM,
CAMERA_VIDEO_MODE,
CAMERA_VIDEO_FLIP_VERTICAL,
CAMERA_VIDEO_FLIP_HORIZONTAL,
#else
CAMERA_VIDEO_STREAM_DUMMY,
CAMERA_VIDEO_MODE_DUMMY,
CAMERA_VIDEO_FLIP_VERTICAL_DUMMY,
CAMERA_VIDEO_FLIP_HORIZONTAL_DUMMY,
#endif	//SDK_SERVICE_CAMERA

#if (SDK_SERVICE_FDCAN == PS_ENABLE)
CAN_CH0_MODE,
CAN_CH1_MODE,
CAN_CH0_FILTER_INDEX_ENABLE,
CAN_CH1_FILTER_INDEX_ENABLE,
CAN_CH0_STATES,
CAN_CH1_STATES,
CAN_CH0_COMM_STATE_EVENTS,
CAN_CH1_COMM_STATE_EVENTS,
CAN_CH0_RESET,
CAN_CH1_RESET,
CAN_CH0_DRIVER_RESET,
CAN_CH1_DRIVER_RESET,
CAN0_RX_BYTE_COUNT,
CAN0_TX_BYTE_COUNT,
CAN0_RX_DATA_IS_AVAILABLE,
CAN0_RX_DATA_SIZE,
CAN1_RX_BYTE_COUNT,
CAN1_TX_BYTE_COUNT,
CAN1_RX_DATA_IS_AVAILABLE,
CAN1_RX_DATA_SIZE,
CAN_CH0_BAUDRATE,
CAN_CH1_BAUDRATE,
#else
CAN_CH0_MODE_DUMMY,
CAN_CH1_MODE_DUMMY,
CAN_CH0_FILTER_INDEX_ENABLE_DUMMY,
CAN_CH1_FILTER_INDEX_ENABLE_DUMMY,
CAN_CH0_STATES_DUMMY,
CAN_CH1_STATES_DUMMY,
CAN_CH0_COMM_STATE_EVENTS_DUMMY,
CAN_CH1_COMM_STATE_EVENTS_DUMMY,
CAN_CH0_RESET_DUMMY,
CAN_CH1_RESET_DUMMY,
CAN_CH0_DRIVER_RESET_DUMMY,
CAN_CH1_DRIVER_RESET_DUMMY,
CAN0_RX_BYTE_COUNT_DUMMY,
CAN0_TX_BYTE_COUNT_DUMMY,
CAN0_RX_DATA_IS_AVAILABLE_DUMMY,
CAN0_RX_DATA_SIZE_DUMMY,
CAN1_RX_BYTE_COUNT_DUMMY,
CAN1_TX_BYTE_COUNT_DUMMY,
CAN1_RX_DATA_IS_AVAILABLE_DUMMY,
CAN1_RX_DATA_SIZE_DUMMY,
CAN_CH0_BAUDRATE_DUMMY,
CAN_CH1_BAUDRATE_DUMMY,
#endif	//SDK_SERVICE_FDCAN

#if (THROUGH_PUT_SERVICE == PS_ENABLE)
KEYPAD_PERTIME,
DIO_PERTIME,
CI_PERTIME,
POWERMODE_PERTIME,
LIGHT_SENSOR_PERTIME,
WARNINGLIGHT_PERTIME,
LED_PERTIME,
POWER_MONITOR_PERTIME,
USB_PERTIME,
DEFAULT_PERTIME,
BLUETOOTH_PERTIME,
RTC_PERTIME,
SW_TIMER_PERTIME,
CAMERA_PERTIME,
EEPROM_PERTIME,
WATCHDOG_PERTIME,
LCD_PERTIME,
CAN_PERTIME,
J1939_PERTIME,
TOUCHGFX_PERTIME,
#else
KEYPAD_PERTIME_DUMMY,
DIO_PERTIME_DUMMY,
CI_PERTIME_DUMMY,
POWERMODE_PERTIME_DUMMY,
LIGHT_SENSOR_PERTIME_DUMMY,
WARNINGLIGHT_PERTIME_DUMMY,
LED_PERTIME_DUMMY,
POWER_MONITOR_PERTIME_DUMMY,
USB_PERTIME_DUMMY,
DEFAULT_PERTIME_DUMMY,
BLUETOOTH_PERTIME_DUMMY,
RTC_PERTIME_DUMMY,
SW_TIMER_PERTIME_DUMMY,
CAMERA_PERTIME_DUMMY,
EEPROM_PERTIME_DUMMY,
WATCHDOG_PERTIME_DUMMY,
LCD_PERTIME_DUMMY,
CAN_PERTIME_DUMMY,
J1939_PERTIME_DUMMY,
TOUCHGFX_PERTIME_DUMMY,
#endif	//THROUGH_PUT_SERVICE

#if (SDK_SERVICE_EEPROM == PS_ENABLE)
EEPROM_READ_STATUS,
EEPROM_WRITE_STATUS,
#else
EEPROM_READ_STATUS_DUMMY,
EEPROM_WRITE_STATUS_DUMMY,
#endif	//SDK_SERVICE_EEPROM

IS_PS_INIT_DONE,
U8_DUMMY,
END_U8BIT,

START_WRU8BIT,
WRU8_DUMMY,
END_WRU8BIT,

START_U16BIT,
#if (SDK_SERVICE_WARNING_LIGHT == PS_ENABLE)
#if (CONF_WARNING_LIGHT_01_ENABLE == PS_ENABLE)
WARNING_LIGHT_01_BLINKING,
#else
WARNING_LIGHT_01_BLINKING_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_02_ENABLE == PS_ENABLE)
WARNING_LIGHT_02_BLINKING,
#else
WARNING_LIGHT_02_BLINKING_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_03_ENABLE == PS_ENABLE)
WARNING_LIGHT_03_BLINKING,
#else
WARNING_LIGHT_03_BLINKING_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_04_ENABLE == PS_ENABLE)
WARNING_LIGHT_04_BLINKING,
#else
WARNING_LIGHT_04_BLINKING_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_05_ENABLE == PS_ENABLE)
WARNING_LIGHT_05_BLINKING,
#else
WARNING_LIGHT_05_BLINKING_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_06_ENABLE == PS_ENABLE)
WARNING_LIGHT_06_BLINKING,
#else
WARNING_LIGHT_06_BLINKING_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_07_ENABLE == PS_ENABLE)
WARNING_LIGHT_07_BLINKING,
#else
WARNING_LIGHT_07_BLINKING_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_08_ENABLE == PS_ENABLE)
WARNING_LIGHT_08_BLINKING,
#else
WARNING_LIGHT_08_BLINKING_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_09_ENABLE == PS_ENABLE)
WARNING_LIGHT_09_BLINKING,
#else
WARNING_LIGHT_09_BLINKING_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_10_ENABLE == PS_ENABLE)
WARNING_LIGHT_10_BLINKING,
#else
WARNING_LIGHT_10_BLINKING_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_11_ENABLE == PS_ENABLE)
WARNING_LIGHT_11_BLINKING,
#else
WARNING_LIGHT_11_BLINKING_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_12_ENABLE == PS_ENABLE)
WARNING_LIGHT_12_BLINKING,
#else
WARNING_LIGHT_12_BLINKING_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_13_ENABLE == PS_ENABLE)
WARNING_LIGHT_13_BLINKING,
#else
WARNING_LIGHT_13_BLINKING_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_14_ENABLE == PS_ENABLE)
WARNING_LIGHT_14_BLINKING,
#else
WARNING_LIGHT_14_BLINKING_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_15_ENABLE == PS_ENABLE)
WARNING_LIGHT_15_BLINKING,
#else
WARNING_LIGHT_15_BLINKING_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_16_ENABLE == PS_ENABLE)
WARNING_LIGHT_16_BLINKING,
#else
WARNING_LIGHT_16_BLINKING_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_17_ENABLE == PS_ENABLE)
WARNING_LIGHT_17_BLINKING,
#else
WARNING_LIGHT_17_BLINKING_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_18_ENABLE == PS_ENABLE)
WARNING_LIGHT_18_BLINKING,
#else
WARNING_LIGHT_18_BLINKING_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_19_ENABLE == PS_ENABLE)
WARNING_LIGHT_19_BLINKING,
#else
WARNING_LIGHT_19_BLINKING_DUMMY,
#endif

#if (CONF_WARNING_LIGHT_20_ENABLE == PS_ENABLE)
WARNING_LIGHT_20_BLINKING,
#else
WARNING_LIGHT_20_BLINKING_DUMMY,
#endif
#endif	//SDK_SERVICE_WARNING_LIGHT

#if (SDK_SERVICE_LCD == PS_ENABLE)
DISPLAY_X0_ORIGIN,
DISPLAY_Y0_ORIGIN,
#else
DISPLAY_X0_ORIGIN_DUMMY,
DISPLAY_Y0_ORIGIN_DUMMY,
#endif

#if (SDK_SERVICE_LED == PS_ENABLE)

#if (CONF_RED_LED_PS_STATE == PS_ENABLE)
LED_RED_BLINKING,
#else
LED_RED_BLINKING_DUMMY,
#endif

#if (CONF_AMB_LED_PS_STATE == PS_ENABLE)
LED_AMB_BLINKING,
#else
LED_AMB_BLINKING_DUMMY,
#endif

#endif	//SDK_SERVICE_LED

#if (SDK_SERVICE_CFG_INPUT == PS_ENABLE)
//CFG_INPUT_01_VOLTAGE_3_3V,
CFG_INPUT_01_RESISTANCE,
//CFG_INPUT_02_VOLTAGE_3_3V,
CFG_INPUT_02_RESISTANCE,
//CFG_INPUT_03_VOLTAGE_3_3V,
CFG_INPUT_03_RESISTANCE,
//CFG_INPUT_04_VOLTAGE_3_3V,
CFG_INPUT_04_RESISTANCE,
//CFG_INPUT_05_VOLTAGE_3_3V,
CFG_INPUT_05_RESISTANCE,
//CFG_INPUT_06_VOLTAGE_3_3V,
CFG_INPUT_06_RESISTANCE,
CFG_INPUT_01_VOLTAGE_32V,
CFG_INPUT_01_VOLTAGE_LOW_6V,
CFG_INPUT_02_VOLTAGE_32V,
CFG_INPUT_02_VOLTAGE_LOW_6V,
CFG_INPUT_03_VOLTAGE_32V,
CFG_INPUT_03_VOLTAGE_LOW_6V,
CFG_INPUT_04_VOLTAGE_32V,
CFG_INPUT_04_VOLTAGE_LOW_6V,
CFG_INPUT_05_VOLTAGE_32V,
CFG_INPUT_05_VOLTAGE_LOW_6V,
CFG_INPUT_06_VOLTAGE_32V,
CFG_INPUT_06_VOLTAGE_LOW_6V,
#else
//CFG_INPUT_01_VOLTAGE_3_3V_DUMMY,
CFG_INPUT_01_RESISTANCE_DUMMY,
//CFG_INPUT_02_VOLTAGE_3_3V_DUMMY,
CFG_INPUT_02_RESISTANCE_DUMMY,
//CFG_INPUT_03_VOLTAGE_3_3V_DUMMY,
CFG_INPUT_03_RESISTANCE_DUMMY,
//CFG_INPUT_04_VOLTAGE_3_3V_DUMMY,
CFG_INPUT_04_RESISTANCE_DUMMY,
//CFG_INPUT_05_VOLTAGE_3_3V_DUMMY,
CFG_INPUT_05_RESISTANCE_DUMMY,
//CFG_INPUT_06_VOLTAGE_3_3V_DUMMY,
CFG_INPUT_06_RESISTANCE_DUMMY,
CFG_INPUT_01_VOLTAGE_32V_DUMMY,
CFG_INPUT_01_VOLTAGE_LOW_6V_DUMMY,
CFG_INPUT_02_VOLTAGE_32V_DUMMY,
CFG_INPUT_02_VOLTAGE_LOW_6V_DUMMY,
CFG_INPUT_03_VOLTAGE_32V_DUMMY,
CFG_INPUT_03_VOLTAGE_LOW_6V_DUMMY,
CFG_INPUT_04_VOLTAGE_32V_DUMMY,
CFG_INPUT_04_VOLTAGE_LOW_6V_DUMMY,
CFG_INPUT_05_VOLTAGE_32V_DUMMY,
CFG_INPUT_05_VOLTAGE_LOW_6V_DUMMY,
CFG_INPUT_06_VOLTAGE_32V_DUMMY,
CFG_INPUT_06_VOLTAGE_LOW_6V_DUMMY,
#endif	//SDK_SERVICE_CFG_INPUT

#if(SDK_SERVICE_POWER_MONITOR == PS_ENABLE)
BATTERY_LEVEL,
#else
BATTERY_LEVEL_DUMMY,
#endif	//SDK_SERVICE_POWER_MONITOR

#if (SDK_SERVICE_SWTIMER == PS_ENABLE)
TIMER_TIMEOUT_01,
TIMER_TIMEOUT_02,
TIMER_TIMEOUT_03,
TIMER_TIMEOUT_04,
TIMER_TIMEOUT_05,
TIMER_TIMEOUT_06,
#else
TIMER_TIMEOUT_01_DUMMY,
TIMER_TIMEOUT_02_DUMMY,
TIMER_TIMEOUT_03_DUMMY,
TIMER_TIMEOUT_04_DUMMY,
TIMER_TIMEOUT_05_DUMMY,
TIMER_TIMEOUT_06_DUMMY,
#endif	//SDK_SERVICE_SWTIMER

#if (SDK_SERVICE_CAMERA == PS_ENABLE)
CAMERA_X0_WIDTH,
CAMERA_Y0_HEIGHT,
CAMERA_X0_ORIGIN,
CAMERA_Y0_ORIGIN,
#else
CAMERA_X0_WIDTH_DUMMY,
CAMERA_Y0_HEIGHT_DUMMY,
CAMERA_X0_ORIGIN_DUMMY,
CAMERA_Y0_ORIGIN_DUMMY,
#endif	//SDK_SERVICE_CAMERA

U16_DUMMY,
END_U16BIT,

START_WRU16BIT,
WRU16_DUMMY,
END_WRU16BIT,

START_U32BIT,
#if (SDK_SERVICE_CFG_INPUT == PS_ENABLE)
CFG_INPUT_01_FREQUENCY,
CFG_INPUT_02_FREQUENCY,
CFG_INPUT_03_FREQUENCY,
CFG_INPUT_04_FREQUENCY,
CFG_INPUT_05_FREQUENCY,
CFG_INPUT_06_CURRENT,
#else
CFG_INPUT_01_FREQUENCY_DUMMY,
CFG_INPUT_02_FREQUENCY_DUMMY,
CFG_INPUT_03_FREQUENCY_DUMMY,
CFG_INPUT_04_FREQUENCY_DUMMY,
CFG_INPUT_05_FREQUENCY_DUMMY,
CFG_INPUT_06_CURRENT_DUMMY,
#endif	//SDK_SERVICE_CFG_INPUT

#if (SDK_SERVICE_LIGHT_SENSOR == PS_ENABLE)
LIGHT_SENSOR_DATA,
#else
LIGHT_SENSOR_DATA_DUMMY,
#endif	//SDK_SERVICE_LIGHT_SENSOR

#if (SDK_SERVICE_PM == PS_ENABLE)
#if (RTC_WAKEUP_SOURCE_STATE == PS_ENABLE)
RTC_WAKEUP_TIMEOUT,
#else
DUMMY_WAKEUP_TIMEOUT,
#endif
#endif	//SDK_SERVICE_PM

#if (SDK_SERVICE_FDCAN == PS_ENABLE)
CAN_CH0_FILTER_INDEX_ID,
CAN_CH1_FILTER_INDEX_ID,
CAN_CH0_FILTER_INDEX_IDMASK,
CAN_CH1_FILTER_INDEX_IDMASK,
#else
CAN_CH0_FILTER_INDEX_ID_DUMMY,
CAN_CH1_FILTER_INDEX_ID_DUMMY,
CAN_CH0_FILTER_INDEX_IDMASK_DUMMY,
CAN_CH1_FILTER_INDEX_IDMASK_DUMMY,
#endif	//SDK_SERVICE_FDCAN

#if (THROUGH_PUT_SERVICE == PS_ENABLE)
KEYPAD_ABSTIME,
DIO_ABSTIME,
CI_ABSTIME,
POWERMODE_ABSTIME,
LIGHT_SENSOR_ABSTIME,
WARNINGLIGHT_ABSTIME,
LED_ABSTIME,
POWER_MONITOR_ABSTIME,
USB_ABSTIME,
DEFAULT_ABSTIME,
BLUETOOTH_ABSTIME,
RTC_ABSTIME,
SW_TIMER_ABSTIME,
CAMERA_ABSTIME,
EEPROM_ABSTIME,
WATCHDOG_ABSTIME,
LCD_ABSTIME,
CAN_ABSTIME,
J1939_ABSTIME,
TOUCHGFX_ABSTIME,
#else
KEYPAD_ABSTIME_DUMMY,
DIO_ABSTIME_DUMMY,
CI_ABSTIME_DUMMY,
POWERMODE_ABSTIME_DUMMY,
LIGHT_SENSOR_ABSTIME_DUMMY,
WARNINGLIGHT_ABSTIME_DUMMY,
LED_ABSTIME_DUMMY,
POWER_MONITOR_ABSTIME_DUMMY,
USB_ABSTIME_DUMMY,
DEFAULT_ABSTIME_DUMMY,
BLUETOOTH_ABSTIME_DUMMY,
RTC_ABSTIME_DUMMY,
SW_TIMER_ABSTIME_DUMMY,
CAMERA_ABSTIME_DUMMY,
EEPROM_ABSTIME_DUMMY,
WATCHDOG_ABSTIME_DUMMY,
LCD_ABSTIME_DUMMY,
CAN_ABSTIME_DUMMY,
J1939_ABSTIME_DUMMY,
TOUCHGFX_ABSTIME_DUMMY,
#endif	//THROUGH_PUT_SERVICE

U32_DUMMY,
END_U32BIT,

START_U64BIT,
U64_DUMMY,
END_U64BIT,

START_S8BIT,
S8_DUMMY,
END_S8BIT,

START_S16BIT,
S16_DUMMY,
END_S16BIT,

START_S32BIT,
S32_DUMMY,
END_S32BIT,

START_FLOAT,
#if(SDK_SERVICE_POWER_MONITOR == PS_ENABLE)
THERMOSTAT_LEVEL,
#else
THERMOSTAT_LEVEL_DUMMY,
#endif	//SDK_SERVICE_POWER_MONITOR
FLOAT_DUMMY,
END_FLOAT,

START_EEPROM,

END_EEPROM = START_EEPROM + EE_USER_END,

#if 0
START_EEPROM,
#if (SDK_SERVICE_EEPROM == PS_ENABLE)
EE_PLACEHOLDER_1,
EE_PLACEHOLDER_X=(EE_PLACEHOLDER_1 + SIZE_OF_PLACEHOLDER),
#endif	//SDK_SERVICE_EEPROM
EEPROM_DUMMY,
END_EEPROM,
#endif

START_BUF512BIT,
#if (SDK_SERVICE_BLE == PS_ENABLE)
BLE_TX_DATA,
BLE_RX_DATA,
#endif	//SDK_SERVICE_BLE

#if (SDK_SERVICE_USB == PS_ENABLE)
USB_TX_DATA,
USB_RX_DATA,
#endif	//SDK_SERVICE_USB

#if (SDK_SERVICE_FDCAN == PS_ENABLE)
CAN0_TX_DATA,
CAN0_RX_DATA,
CAN1_TX_DATA,
CAN1_RX_DATA,
#endif	//SDK_SERVICE_FDCAN

BUF512BIT_DUMMY,
END_BUF512BIT,

#include "J1939Data_Layer.h"

NOT_VALID_IDX = 0xFFFF
}DL_Data_T;

typedef enum
{
   DLU8,
   DLU16,
   DLU32,
   DLU64,
   DLS8,
   DLS16,
   DLS32,
   DLFLOAT,
   DL_EEPROM,
   DL_BUF512BIT,
   DL_JU8,
   DL_JU16,
   DL_JU32,
   NOT_SUPPRTED
}DL_data_type_T;

/* USER CODE END enum */

/* USER CODE BEGIN Private defines */
#define NULL_POINTER  -3
/*!
 * 64byte buffer size
 */
#define BUF512BITSIZE           64
#define DB_512BIT_NO_BUF        10
/* USER CODE END Private defines */

/* USER CODE BEGIN EFP */
int8_t Get_DL(uint16_t dl_index, uint8_t *buf);
int8_t Set_DL(uint16_t dl_index, uint8_t *buf);
void Set_DL_Ram(uint16_t dl_index, uint64_t value);
/* USER CODE END EFP */

#endif

/**************** (C) COPYRIGHT 2022 Maxima Technologies *******************/
/***************************** END OF FILE *********************************/
